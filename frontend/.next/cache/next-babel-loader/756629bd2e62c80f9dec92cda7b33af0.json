{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport function getStrapiURL() {\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return \"\".concat(process.env.NEXT_PUBLIC_STRAPI_API_URL || \"http://localhost:1337\").concat(path);\n} // Helper to make GET requests to Strapi\n\nexport function fetchAPI(_x) {\n  return _fetchAPI.apply(this, arguments);\n}\n\nfunction _fetchAPI() {\n  _fetchAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n    var options,\n        defaultOptions,\n        mergedOptions,\n        requestUrl,\n        response,\n        data,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            defaultOptions = {\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            };\n            mergedOptions = _objectSpread({}, options);\n            requestUrl = getStrapiURL(path);\n            _context.next = 6;\n            return fetch(requestUrl, mergedOptions);\n\n          case 6:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 10;\n              break;\n            }\n\n            console.error(response.statusText);\n            throw new Error(\"An error occured please try again\");\n\n          case 10:\n            _context.next = 12;\n            return response.json();\n\n          case 12:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchAPI.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/vladtishenko/Work/project/idest/frontend/lib/api.js"],"names":["getStrapiURL","path","process","env","NEXT_PUBLIC_STRAPI_API_URL","fetchAPI","options","defaultOptions","headers","mergedOptions","requestUrl","fetch","response","ok","console","error","statusText","Error","json","data"],"mappings":";;;;;;;;AAAA,OAAO,SAASA,YAAT,GAAiC;AAAA,MAAXC,IAAW,uEAAJ,EAAI;AACtC,mBACEC,OAAO,CAACC,GAAR,CAAYC,0BAAZ,IAA0C,uBAD5C,SAEGH,IAFH;AAGD,C,CAED;;AACA,gBAAsBI,QAAtB;AAAA;AAAA;;;uEAAO,iBAAwBJ,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8BK,YAAAA,OAA9B,2DAAwC,EAAxC;AACCC,YAAAA,cADD,GACkB;AACrBC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT;AADY,aADlB;AAMCC,YAAAA,aAND,qBAQAH,OARA;AAUCI,YAAAA,UAVD,GAUcV,YAAY,CAACC,IAAD,CAV1B;AAAA;AAAA,mBAWkBU,KAAK,CAACD,UAAD,EAAaD,aAAb,CAXvB;;AAAA;AAWCG,YAAAA,QAXD;;AAAA,gBAaAA,QAAQ,CAACC,EAbT;AAAA;AAAA;AAAA;;AAcHC,YAAAA,OAAO,CAACC,KAAR,CAAcH,QAAQ,CAACI,UAAvB;AAdG,kBAeG,IAAIC,KAAJ,qCAfH;;AAAA;AAAA;AAAA,mBAiBcL,QAAQ,CAACM,IAAT,EAjBd;;AAAA;AAiBCC,YAAAA,IAjBD;AAAA,6CAkBEA,IAlBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["export function getStrapiURL(path = \"\") {\n  return `${\n    process.env.NEXT_PUBLIC_STRAPI_API_URL || \"http://localhost:1337\"\n  }${path}`;\n}\n\n// Helper to make GET requests to Strapi\nexport async function fetchAPI(path, options = {}) {\n  const defaultOptions = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  }\n  const mergedOptions = {\n    // ...defaultOptions,\n    ...options,\n  }\n  const requestUrl = getStrapiURL(path)\n  const response = await fetch(requestUrl, mergedOptions)\n\n  if (!response.ok) {\n    console.error(response.statusText)\n    throw new Error(`An error occured please try again`)\n  }\n  const data = await response.json()\n  return data\n}\n"]},"metadata":{},"sourceType":"module"}