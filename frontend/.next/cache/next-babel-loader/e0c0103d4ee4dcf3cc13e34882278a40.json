{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport function getStrapiURL(path = \"\") {\n  return `${process.env.NEXT_PUBLIC_STRAPI_API_URL || \"http://localhost:1337\"}${path}`;\n} // Helper to make GET requests to Strapi\n\nexport async function fetchAPI(path, options = {}) {\n  const defaultOptions = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  const mergedOptions = _objectSpread({}, options);\n\n  const requestUrl = getStrapiURL(path);\n  const response = await fetch(requestUrl, mergedOptions);\n\n  if (!response.ok) {\n    console.error(response.statusText);\n    throw new Error(`An error occured please try again`);\n  }\n\n  const data = await response.json();\n  return data;\n}","map":{"version":3,"sources":["/Users/vladtishenko/Work/project/idest/frontend/lib/api.js"],"names":["getStrapiURL","path","process","env","NEXT_PUBLIC_STRAPI_API_URL","fetchAPI","options","defaultOptions","headers","mergedOptions","requestUrl","response","fetch","ok","console","error","statusText","Error","data","json"],"mappings":";;;;;;AAAA,OAAO,SAASA,YAAT,CAAsBC,IAAI,GAAG,EAA7B,EAAiC;AACtC,SAAQ,GACNC,OAAO,CAACC,GAAR,CAAYC,0BAAZ,IAA0C,uBAC3C,GAAEH,IAAK,EAFR;AAGD,C,CAED;;AACA,OAAO,eAAeI,QAAf,CAAwBJ,IAAxB,EAA8BK,OAAO,GAAG,EAAxC,EAA4C;AACjD,QAAMC,cAAc,GAAG;AACrBC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADY,GAAvB;;AAKA,QAAMC,aAAa,qBAEdH,OAFc,CAAnB;;AAIA,QAAMI,UAAU,GAAGV,YAAY,CAACC,IAAD,CAA/B;AACA,QAAMU,QAAQ,GAAG,MAAMC,KAAK,CAACF,UAAD,EAAaD,aAAb,CAA5B;;AAEA,MAAI,CAACE,QAAQ,CAACE,EAAd,EAAkB;AAChBC,IAAAA,OAAO,CAACC,KAAR,CAAcJ,QAAQ,CAACK,UAAvB;AACA,UAAM,IAAIC,KAAJ,CAAW,mCAAX,CAAN;AACD;;AACD,QAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;AACA,SAAOD,IAAP;AACD","sourcesContent":["export function getStrapiURL(path = \"\") {\n  return `${\n    process.env.NEXT_PUBLIC_STRAPI_API_URL || \"http://localhost:1337\"\n  }${path}`;\n}\n\n// Helper to make GET requests to Strapi\nexport async function fetchAPI(path, options = {}) {\n  const defaultOptions = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  }\n  const mergedOptions = {\n    // ...defaultOptions,\n    ...options,\n  }\n  const requestUrl = getStrapiURL(path)\n  const response = await fetch(requestUrl, mergedOptions)\n\n  if (!response.ok) {\n    console.error(response.statusText)\n    throw new Error(`An error occured please try again`)\n  }\n  const data = await response.json()\n  return data\n}\n"]},"metadata":{},"sourceType":"module"}